<style>
  #metadata a {
     color: #dac0b7;
  }
  #metadata {
    margin-top:0px;
    color: #dac0b7;
  }
  #title {
    margin-bottom: 0px;
  }
  .date {
    color: #dac0b7;
  }
  .tweet-text {
    margin-bottom: 0px;
  }
  #search {
    padding: 6px;
    font-size: 15px;
    border-radius: 5px;
    width: 400px;
    display: none;
  }
  #error {
    color: rgb(255, 105, 105);
  }

  #tweet-container {
    /*
      white-space: pre-wrap;       
      word-wrap: break-word; 
    */
    display: flex;
    flex-wrap: wrap;
    /* justify-content: space-around;    */
  }


  .tweet {
    border: 1px solid rgb(255, 190, 85);
    margin: 5px;
    padding: 10px;
    box-sizing: border-box;
    border-radius: 5px;
    width: 400px;
    display: flex;
    flex-direction: column;
  }
  .tweet p {
    margin-top: 0px;
  }
  .tweet .metadata {
    color:  #dac0b7;
  }
  .tweet .toolbar {
    font-size: 20px;
  }

  .thread {
    border: 1px solid rgb(255, 190, 85);
    border-radius: 5px;
  }
  .thread .tweet {
    border: none;
  }
</style>
<h3>
  <a href="/">üîô Back to home</a>
</h3>
<h1 id="title">
  {{archive.dataValues.username}} ({{archive.dataValues.numTweets}} tweets)
</h1>
<p id="metadata">
  Views: üìÉ All tweets ‚Ä¢ ‚õ©Ô∏è <a href="">Interactions with followers</a> ‚Ä¢ üé© <a href="">Top tweets</a>
</p>
<hr/>
<p id="error">
  {{error}}
</p>
<input id="search" placeholder="search" type="text" autocomplete="off"></input>
<p id="loading-text">Loading tweets...</p>
<p id="tweet-counts"></p>

<div id="tweet-container">
  
</div>
<script src="/util.js"></script>

 <script>  
  async function init() {
      const container = document.querySelector("#tweet-container")
      const accountId = "{{archive.dataValues.accountId}}"
      const username = "{{archive.dataValues.username}}"

      const util = new Util({accountId, username})

      let tweets = []
      try {
        tweets = util.sortAscending(await util.fetchTweets())
      } catch (e) {
        document.querySelector("#error").innerHTML = `Failed to fetch tweets: ${String(e)}`
      }
       
      document.querySelector("#search").style.display = 'block'
      document.querySelector("#loading-text").style.display = 'none'


      const  threadData = util.getThreads(tweets)
      const { retweet_count, external_reply_count } = threadData
      tweets = threadData.tweets

      let str = ""
      for (let i = 0; i < tweets.length; i++) {
        const tweet = tweets[i]

        if (tweet.parent) {
          continue;
        }
        if (tweet.nextTweet == null) {
          str += util.makeHTMLForTweet(tweet)
        } else {
          str += util.makeHTMLForThread(tweet)
        }
        
      }

      document.querySelector("#tweet-counts").innerHTML = `retweets: ${retweet_count} (hidden) non-self replies: ${external_reply_count} (hidden)`
      container.innerHTML = str
  }
  init()

 </script>